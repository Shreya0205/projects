import pandas as pd
import numpy as np
from numpy import genfromtxt
import pickle
import os

# Open a file

FeaturesExtracted=['Machine','NumberOfSections','SizeOfOptionalHeader','Characteristics','MajorLinkerVersion','MinorLinkerVersion','SizeOfCode','SizeOfInitializedData','SizeOfUninitializedData','AddressOfEntryPoint','BaseOfCode','BaseOfData','ImageBase','SectionAlignment','FileAlignment','MajorOperatingSystemVersion','MinorOperatingSystemVersion','MajorImageVersion','MinorImageVersion','MajorSubsystemVersion','MinorSubsystemVersion','SizeOfImage','SizeOfHeaders','CheckSum','Subsystem','DllCharacteristics','SizeOfStackReserve','SizeOfStackCommit','SizeOfHeapReserve','SizeOfHeapCommit','LoaderFlags','NumberOfRvaAndSizes','MeanSizeOfRawData','MaxSizeOfRawData','MinSizeOfRawData','MeanMisc_VirtualSize','MaxMisc_VirtualSize','MinMisc_VirtualSize','MeanEntropy','MaxEntropy','MinEntropy','DllsImported','OrdinalDlls','APIImports']
feat=['Machine','NumberOfSections','SizeOfOptionalHeader','Characteristics','MajorLinkerVersion','MinorLinkerVersion','SizeOfCode','SizeOfInitializedData','SizeOfUninitializedData','AddressOfEntryPoint','BaseOfCode','BaseOfData','ImageBase','SectionAlignment','FileAlignment','MajorOperatingSystemVersion','MinorOperatingSystemVersion','MajorImageVersion','MinorImageVersion','MajorSubsystemVersion','MinorSubsystemVersion','SizeOfImage','SizeOfHeaders','CheckSum','Subsystem','DllCharacteristics','SizeOfStackReserve','SizeOfStackCommit','SizeOfHeapReserve','SizeOfHeapCommit','LoaderFlags','NumberOfRvaAndSizes']

df2=pd.DataFrame(columns=feat)
dir_path = input("Enter directory path: ")
dirs = os.listdir( dir_path )

if dir_path[-1]!='/':
    dir_path=dir_path+"/"

for sh in dirs:
    file_name=sh
    sh=dir_path+sh+"/Structure_Info.txt"
    fi = open(sh,encoding ='ISO-8859-1')
    data=fi.read()
    data=data.split("\n")
   
    lines=[]
    for i in range(len(data)):
        line=' '.join(data[i].split()).split(" ")
        lines.append(line)
            #print(output1)
    df2=df2.append(pd.Series(name=sh))
    df2=df2.fillna(0)
    
    i=0 
    result=""
    number=1
    numS=0
    end=0
    for j in range(len(lines)):
        feature=feat[i]+":"
        if feature in lines[j]:
            df2[feat[i]][sh]=int(lines[j][3],0)
            #result=result+str(int(lines[j][3],0))+" "
            if(feat[i]=='NumberOfSections'):
                numS=int(lines[j][3],0)
            if(i==len(feat)-1):
                break
            i=i+1
            end=j

    for r in range(len(feat)):
        result=result+str(df2[feat[r]][sh])+","
    
        
    feat2=['SizeOfRawData','Misc_VirtualSize','Entropy']
    for f in feat2: 
        listof=[]
        for j in range(end+2,len(lines)):
            feature=f+":"
            if feature in lines[j]:

                if feature == "Entropy:":
                    listof.append(float(lines[j][1]))
                else:
                    listof.append(int(lines[j][3],0))
                if(len(listof)==numS):
                    break
        if(len(listof)==0):
            result=result+"0,0,0,"
        else:
            mean=sum(listof)/len(listof)
            result=result+str(round(mean,2))+","+str(max(listof))+","+str(min(listof))+","

    listof=[]
    ordinal=[]
    for j in range(end+2,len(lines)):
        if ".dll" in lines[j][0]:
            c=lines[j][0].split(".")
            if "Ordinal" in lines[j][1]:
                ordinal.append(c[0])
            listof.append(c[0])
            
    
            
    x = np.array(listof) 
    result=result+str(len(np.unique(x)))+","
    y = np.array(ordinal) 
    result=result+str(len(np.unique(y)))+","
    result=result+str(len(listof))+"\n"
   
      
    output = open("feature.csv",'a')
    output.write(result)
    output.close()
    output = open("sha.txt",'a')
    output.write(file_name+"\n")
    output.close()
    
X_test = genfromtxt('feature.csv', delimiter=',')
model = pickle.load(open('model.sav', 'rb'))
y_pred = model.predict(X_test)

file1 = open('sha.txt', 'r') 
Lines = file1.readlines()
j=0
result=""
for i in Lines:
    if y_pred[j] == 1.0:
        result=result+i.partition("\n")[0]+",M\n"
    else:
        result=result+i.partition("\n")[0]+",B\n"
    j=j+1

file1.close()
final = open('static.csv', 'a') 
final.write("File_Hash,Predicted Label\n")
final.write(result)
final.close()

